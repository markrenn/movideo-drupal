<?php
/**
 * @file
 * Movideo API Integration
 */

define('MOVIDEO_WIDGET', 'options_select');

/**
 * Implements hook_help().
 */
function movideo_init() {
  drupal_add_js('http://static.movideo.com/js/movideo.min.latest.js', 'external');  //The movideo JavaScript SDK.
  drupal_add_js(drupal_get_path('module', 'movideo') . '/js/movideo.js');
}

/**
 * Implements hook_help().
 */
function movideo_help($path, $arg) {
	switch ($path) {
		case 'admin/help#movideo':{
			$ret_val = '<h3>' . t('About') . '</h3>';
			$ret_val .= '<p>' . t('Custom built integration to Drupal of the Movideo API http://code.movideo.com/') . '</p>';
			return $ret_val;
			break;
		}
	}
}

/**
 * Implements hook_permission().
 */
function movideo_permission(){
	return array(
		'manage movideo controls' => array(
			'title' => t('Manage Movideo Controls'),
			'description' => t('Perform administrative tasks on Movideo integration'),
		),
	);
}

/**
 * Implements hook_menu().
 */
function movideo_menu(){
	$items = array();


	// Admin configuration group.
	$items['admin/config/movideo'] = array(
		'title' => 'Movideo',
		'description' => 'Administer Movideo integration',
		'access arguments' => array('manage movideo controls'),
	);

	// Admin configuration - Settings.
	$items['admin/config/movideo/manage'] = array(
		'title' => 'Movideo Settings',
		'description' => 'Manage Movideo settings and configurations',
		'access arguments' => array('manage movideo controls'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('movideo_admin_settings_form'),
	);

	return $items;
}

/**
 * Implements hook_form().
 */
function movideo_admin_settings_form($node, &$form_state) {
  $form = array();

  $form['overview'] = array(
    '#markup' => t('This interface allows administrators to manage general Movideo Settings'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  $form['media_api'] = array(
    '#title' => t('Media API Parameters'),
    '#description' => t('Information to connect to the Movideo Media API.'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['media_api']['movideo_media_api_appkey'] = array(
    '#title' => t('API Key'),
    '#description' => t('The API Key used to connect to the Media API.'),
    '#type' => 'textfield',
    '#required' => TRUE,
		'#default_value' => variable_get('movideo_media_api_appkey'),
  );

  $form['media_api']['movideo_media_api_flash_app_alias'] = array(
    '#title' => t('Flash Application Alias'),
    '#description' => t('The name of the Flash Application used to connect to the Media API.'),
    '#type' => 'textfield',
		'#default_value' => variable_get('movideo_media_api_flash_app_alias'),
  );

	$form['media_api']['movideo_media_api_ios_app_alias'] = array(
    '#title' => t('iOS Application Alias'),
    '#description' => t('The name of the iOS Application used to connect to the Media API.'),
    '#type' => 'textfield',
		'#default_value' => variable_get('movideo_media_api_ios_app_alias'),
  );

  return system_settings_form($form);

}

/**
 * Process a validated Movideo setting submission
 */
function movideo_admin_settings_form_submit($form, &$form_state) {
	// Rebuild the form.
	$form_state['rebuild'] = TRUE;

	// Save Movideo variables.
	variable_set('movideo_media_api_appkey', $form_state['values']['movideo_media_api_appkey']);
	variable_set('movideo_media_api_flash_app_alias', $form_state['values']['movideo_media_api_flash_app_alias']);
	variable_set('movideo_media_api_ios_app_alias', $form_state['values']['movideo_media_api_ios_app_alias']);

	// Notify user.
	drupal_set_message(t('Movideo settings saved.'));
}

function movideo_field_info() {
  return array(
		'movideo_media' => array(
			'label' => t('Movideo Media'),
			'description' => t('A field to store the Media ID of a particular video item'),
      'default_widget' => 'movideo_media_search',
      'default_formatter' => 'movideo_player',
		),
		'movideo_playlist' => array(
			'label' => t('Movideo Playlist'),
			'description' => t('A field to store the Playlist ID of a particular set of videos item'),
      'default_widget' => 'number',
      'default_formatter' => 'number_integer',
		),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see movideo_field_widget_error()
 */
function movideo_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function movideo_field_is_empty($item, $field) {
  return empty($item['movideo_media_id']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see movideo_field_formatter_view()
 */
function movideo_field_formatter_info() {
  return array(
    'movideo_player' => array(
      'label' => t('Movideo Media Player'),
      'field types' => array('movideo_media'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 * *
 * @see movideo_field_formatter_info()
 */
function movideo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'movideo_player':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'id' => 'movideo-player-' . $item['movideo_media_id'],
						'class' => 'movideo-player',
						'data-media-id' => $item['movideo_media_id'],
						'data-apikey' => variable_get('movideo_media_api_appkey'),
						'data-iosappalias' => variable_get('movideo_media_api_ios_app_alias'),
						'data-flashappalias' => variable_get('movideo_media_api_flash_app_alias'),
          ),
          '#attached' => array(
            'css' => array(
              array(
                'data' => '.movideo-player { width:600px; margin-left:auto; margin-right:auto; height:340px; margin-top:10px; }',
                'type' => 'inline',
              ),
            ),
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see movideo_field_widget_form()
 */
function movideo_field_widget_info() {
  return array(
		'movideo_media_search' => array(
      'label' => t('Search Movideo cloud'),
      'field types' => array('movideo_media'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function movideo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['movideo_media_id']) ? $items[$delta]['movideo_media_id'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'movideo_media_search':
      $widget += array(
				'#suffix' => '<a class="button movideo-browse" href="/' . drupal_get_path('module', 'movideo') . '/movideo.php?d=' . $delta . '">Browse</a> <a class="button movideo-clear">Clear</a>',
				'#attributes' => array('class' => array('movideo_media_input'),'style' => 'float:left; margin-right:10px;'),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

  }

  $element['movideo_media_id'] = $widget;
  return $element;
}



/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see movideo_field_validate()
 * @see form_error()
 */
function movideo_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'movideo_invalid':
      form_error($element, $error['message']);
      break;
  }
}
